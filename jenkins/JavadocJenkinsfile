pipeline {
    agent none
    parameters {
        string(
            name: 'Tags',
            defaultValue: 'master',
            description: 'List of tags or "master" as a space delimited string for which to build javadoc for (ex. enterprise-v1.x.y)'
        )
        choice(
            name: 'S3Bucket',
            choices: 'alluxio-javadoc-dev\nalluxio-javadoc',
            description: 'S3 bucket to upload javadoc to'
        )
    }
    stages {
        stage('build') {
            agent {
                docker {
                    image 'agent'
                    label 'workerLarge'
                    alwaysPull false
                }
            }
            environment {
                AWS_ACCESS_KEY_ID     = credentials('JENKINS_AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('JENKINS_AWS_SECRET_ACCESS_KEY')
            }
            steps {
                script {
                    def folderName = "ee"
                    def edition = "enterprise"

                    for (tag in params.Tags.split(" ")) {
                        def branch = "refs/tags/${tag}"
                        if (tag == "master") {
                            branch = '*/master'
                        }
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: branch]],
                            extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CleanCheckout']],
                            userRemoteConfigs: [[
                                credentialsId: 'ALLUXIO-CI_GITHUB',
                                url: "https://github.com/TachyonNexus/${edition}",
                            ]]
                        ])
                        sh 'mvn clean install -DskipTests -Dmaven.javadoc.skip -Dcheckstyle.skip -Dlicense.skip -Dfindbugs.skip -Dannotation.skip -quiet'
                        sh 'mvn javadoc:aggregate -Dlicense.skip -quiet'

                        // parse major.minor version from tag matching "v0.0" or leave version as is
                        def version = tag
                        def pattern = /.*v(\d+.\d+).*/
                        def matcher = (tag =~ pattern)
                        if (matcher) {
                            version = matcher[0][1]
                        } else {
                            echo "Tag did not match version regex pattern "+pattern+" -> "+tag
                            echo "Using given tag as folder name"
                        }
                        matcher = null // need to discard matcher because its type, java.util.regex.Matcher, is not serializable in groovy
                        sh "aws s3 sync target/site/apidocs/ s3://${params.S3Bucket}/${folderName}/${version}"
                    }
                }
            }
        }
    }
}
