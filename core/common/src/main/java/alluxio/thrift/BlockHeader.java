/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class BlockHeader implements org.apache.thrift.TBase<BlockHeader, BlockHeader._Fields>, java.io.Serializable, Cloneable, Comparable<BlockHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockHeader");

  private static final org.apache.thrift.protocol.TField ENCRYPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCK_HEADER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockHeaderSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHUNK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHUNK_FOOTER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkFooterSize", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockHeaderTupleSchemeFactory());
  }

  private long encryptionId; // required
  private int blockHeaderSize; // required
  private int chunkSize; // required
  private int chunkFooterSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENCRYPTION_ID((short)1, "encryptionId"),
    BLOCK_HEADER_SIZE((short)2, "blockHeaderSize"),
    CHUNK_SIZE((short)3, "chunkSize"),
    CHUNK_FOOTER_SIZE((short)4, "chunkFooterSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENCRYPTION_ID
          return ENCRYPTION_ID;
        case 2: // BLOCK_HEADER_SIZE
          return BLOCK_HEADER_SIZE;
        case 3: // CHUNK_SIZE
          return CHUNK_SIZE;
        case 4: // CHUNK_FOOTER_SIZE
          return CHUNK_FOOTER_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENCRYPTIONID_ISSET_ID = 0;
  private static final int __BLOCKHEADERSIZE_ISSET_ID = 1;
  private static final int __CHUNKSIZE_ISSET_ID = 2;
  private static final int __CHUNKFOOTERSIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENCRYPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("encryptionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_HEADER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockHeaderSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHUNK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("chunkSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHUNK_FOOTER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("chunkFooterSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockHeader.class, metaDataMap);
  }

  public BlockHeader() {
  }

  public BlockHeader(
    long encryptionId,
    int blockHeaderSize,
    int chunkSize,
    int chunkFooterSize)
  {
    this();
    this.encryptionId = encryptionId;
    setEncryptionIdIsSet(true);
    this.blockHeaderSize = blockHeaderSize;
    setBlockHeaderSizeIsSet(true);
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
    this.chunkFooterSize = chunkFooterSize;
    setChunkFooterSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockHeader(BlockHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.encryptionId = other.encryptionId;
    this.blockHeaderSize = other.blockHeaderSize;
    this.chunkSize = other.chunkSize;
    this.chunkFooterSize = other.chunkFooterSize;
  }

  public BlockHeader deepCopy() {
    return new BlockHeader(this);
  }

  @Override
  public void clear() {
    setEncryptionIdIsSet(false);
    this.encryptionId = 0;
    setBlockHeaderSizeIsSet(false);
    this.blockHeaderSize = 0;
    setChunkSizeIsSet(false);
    this.chunkSize = 0;
    setChunkFooterSizeIsSet(false);
    this.chunkFooterSize = 0;
  }

  public long getEncryptionId() {
    return this.encryptionId;
  }

  public BlockHeader setEncryptionId(long encryptionId) {
    this.encryptionId = encryptionId;
    setEncryptionIdIsSet(true);
    return this;
  }

  public void unsetEncryptionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENCRYPTIONID_ISSET_ID);
  }

  /** Returns true if field encryptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptionId() {
    return EncodingUtils.testBit(__isset_bitfield, __ENCRYPTIONID_ISSET_ID);
  }

  public void setEncryptionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENCRYPTIONID_ISSET_ID, value);
  }

  public int getBlockHeaderSize() {
    return this.blockHeaderSize;
  }

  public BlockHeader setBlockHeaderSize(int blockHeaderSize) {
    this.blockHeaderSize = blockHeaderSize;
    setBlockHeaderSizeIsSet(true);
    return this;
  }

  public void unsetBlockHeaderSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKHEADERSIZE_ISSET_ID);
  }

  /** Returns true if field blockHeaderSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockHeaderSize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKHEADERSIZE_ISSET_ID);
  }

  public void setBlockHeaderSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKHEADERSIZE_ISSET_ID, value);
  }

  public int getChunkSize() {
    return this.chunkSize;
  }

  public BlockHeader setChunkSize(int chunkSize) {
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
    return this;
  }

  public void unsetChunkSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID);
  }

  /** Returns true if field chunkSize is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID);
  }

  public void setChunkSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKSIZE_ISSET_ID, value);
  }

  public int getChunkFooterSize() {
    return this.chunkFooterSize;
  }

  public BlockHeader setChunkFooterSize(int chunkFooterSize) {
    this.chunkFooterSize = chunkFooterSize;
    setChunkFooterSizeIsSet(true);
    return this;
  }

  public void unsetChunkFooterSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKFOOTERSIZE_ISSET_ID);
  }

  /** Returns true if field chunkFooterSize is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkFooterSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CHUNKFOOTERSIZE_ISSET_ID);
  }

  public void setChunkFooterSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKFOOTERSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENCRYPTION_ID:
      if (value == null) {
        unsetEncryptionId();
      } else {
        setEncryptionId((Long)value);
      }
      break;

    case BLOCK_HEADER_SIZE:
      if (value == null) {
        unsetBlockHeaderSize();
      } else {
        setBlockHeaderSize((Integer)value);
      }
      break;

    case CHUNK_SIZE:
      if (value == null) {
        unsetChunkSize();
      } else {
        setChunkSize((Integer)value);
      }
      break;

    case CHUNK_FOOTER_SIZE:
      if (value == null) {
        unsetChunkFooterSize();
      } else {
        setChunkFooterSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENCRYPTION_ID:
      return getEncryptionId();

    case BLOCK_HEADER_SIZE:
      return getBlockHeaderSize();

    case CHUNK_SIZE:
      return getChunkSize();

    case CHUNK_FOOTER_SIZE:
      return getChunkFooterSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENCRYPTION_ID:
      return isSetEncryptionId();
    case BLOCK_HEADER_SIZE:
      return isSetBlockHeaderSize();
    case CHUNK_SIZE:
      return isSetChunkSize();
    case CHUNK_FOOTER_SIZE:
      return isSetChunkFooterSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockHeader)
      return this.equals((BlockHeader)that);
    return false;
  }

  public boolean equals(BlockHeader that) {
    if (that == null)
      return false;

    boolean this_present_encryptionId = true;
    boolean that_present_encryptionId = true;
    if (this_present_encryptionId || that_present_encryptionId) {
      if (!(this_present_encryptionId && that_present_encryptionId))
        return false;
      if (this.encryptionId != that.encryptionId)
        return false;
    }

    boolean this_present_blockHeaderSize = true;
    boolean that_present_blockHeaderSize = true;
    if (this_present_blockHeaderSize || that_present_blockHeaderSize) {
      if (!(this_present_blockHeaderSize && that_present_blockHeaderSize))
        return false;
      if (this.blockHeaderSize != that.blockHeaderSize)
        return false;
    }

    boolean this_present_chunkSize = true;
    boolean that_present_chunkSize = true;
    if (this_present_chunkSize || that_present_chunkSize) {
      if (!(this_present_chunkSize && that_present_chunkSize))
        return false;
      if (this.chunkSize != that.chunkSize)
        return false;
    }

    boolean this_present_chunkFooterSize = true;
    boolean that_present_chunkFooterSize = true;
    if (this_present_chunkFooterSize || that_present_chunkFooterSize) {
      if (!(this_present_chunkFooterSize && that_present_chunkFooterSize))
        return false;
      if (this.chunkFooterSize != that.chunkFooterSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_encryptionId = true;
    list.add(present_encryptionId);
    if (present_encryptionId)
      list.add(encryptionId);

    boolean present_blockHeaderSize = true;
    list.add(present_blockHeaderSize);
    if (present_blockHeaderSize)
      list.add(blockHeaderSize);

    boolean present_chunkSize = true;
    list.add(present_chunkSize);
    if (present_chunkSize)
      list.add(chunkSize);

    boolean present_chunkFooterSize = true;
    list.add(present_chunkFooterSize);
    if (present_chunkFooterSize)
      list.add(chunkFooterSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEncryptionId()).compareTo(other.isSetEncryptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptionId, other.encryptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockHeaderSize()).compareTo(other.isSetBlockHeaderSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockHeaderSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockHeaderSize, other.blockHeaderSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkSize()).compareTo(other.isSetChunkSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkSize, other.chunkSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkFooterSize()).compareTo(other.isSetChunkFooterSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkFooterSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkFooterSize, other.chunkFooterSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockHeader(");
    boolean first = true;

    sb.append("encryptionId:");
    sb.append(this.encryptionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockHeaderSize:");
    sb.append(this.blockHeaderSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkSize:");
    sb.append(this.chunkSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkFooterSize:");
    sb.append(this.chunkFooterSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockHeaderStandardSchemeFactory implements SchemeFactory {
    public BlockHeaderStandardScheme getScheme() {
      return new BlockHeaderStandardScheme();
    }
  }

  private static class BlockHeaderStandardScheme extends StandardScheme<BlockHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENCRYPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.encryptionId = iprot.readI64();
              struct.setEncryptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCK_HEADER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blockHeaderSize = iprot.readI32();
              struct.setBlockHeaderSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHUNK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunkSize = iprot.readI32();
              struct.setChunkSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHUNK_FOOTER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunkFooterSize = iprot.readI32();
              struct.setChunkFooterSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ENCRYPTION_ID_FIELD_DESC);
      oprot.writeI64(struct.encryptionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_HEADER_SIZE_FIELD_DESC);
      oprot.writeI32(struct.blockHeaderSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.chunkSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNK_FOOTER_SIZE_FIELD_DESC);
      oprot.writeI32(struct.chunkFooterSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockHeaderTupleSchemeFactory implements SchemeFactory {
    public BlockHeaderTupleScheme getScheme() {
      return new BlockHeaderTupleScheme();
    }
  }

  private static class BlockHeaderTupleScheme extends TupleScheme<BlockHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEncryptionId()) {
        optionals.set(0);
      }
      if (struct.isSetBlockHeaderSize()) {
        optionals.set(1);
      }
      if (struct.isSetChunkSize()) {
        optionals.set(2);
      }
      if (struct.isSetChunkFooterSize()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEncryptionId()) {
        oprot.writeI64(struct.encryptionId);
      }
      if (struct.isSetBlockHeaderSize()) {
        oprot.writeI32(struct.blockHeaderSize);
      }
      if (struct.isSetChunkSize()) {
        oprot.writeI32(struct.chunkSize);
      }
      if (struct.isSetChunkFooterSize()) {
        oprot.writeI32(struct.chunkFooterSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.encryptionId = iprot.readI64();
        struct.setEncryptionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.blockHeaderSize = iprot.readI32();
        struct.setBlockHeaderSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chunkSize = iprot.readI32();
        struct.setChunkSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chunkFooterSize = iprot.readI32();
        struct.setChunkFooterSizeIsSet(true);
      }
    }
  }

}

