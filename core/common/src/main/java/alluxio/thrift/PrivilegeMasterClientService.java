/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class PrivilegeMasterClientService {

  /**
   * This interface contains privilege master service endpoints for Alluxio clients.
   */
  public interface Iface extends alluxio.thrift.AlluxioService.Iface {

    /**
     * Returns the privilege information for the given group.
     * 
     * @param group the name of the group
     * 
     * @param options method options
     */
    public List<TPrivilege> getPrivileges(String group, GetPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException;

    /**
     * Returns the privilege information for all groups.
     * 
     * @param options method options
     */
    public Map<String,List<TPrivilege>> getAllGroupPrivileges(GetAllGroupPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException;

    /**
     * Grants the given privileges to the given group, returning the updated privileges for the group.
     * 
     * @param group the name of the group
     * 
     * @param privileges the privileges to grant
     * 
     * @param options method options
     */
    public List<TPrivilege> grantPrivileges(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException;

    /**
     * Removes the given privileges from the given group, returning the updated privileges for the group.
     * 
     * @param group the name of the group
     * 
     * @param privileges the privileges to revoke
     * 
     * @param options method options
     */
    public List<TPrivilege> revokePrivileges(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends alluxio.thrift.AlluxioService .AsyncIface {

    public void getPrivileges(String group, GetPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllGroupPrivileges(GetAllGroupPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void grantPrivileges(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void revokePrivileges(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends alluxio.thrift.AlluxioService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TPrivilege> getPrivileges(String group, GetPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      send_getPrivileges(group, options);
      return recv_getPrivileges();
    }

    public void send_getPrivileges(String group, GetPrivilegesTOptions options) throws org.apache.thrift.TException
    {
      getPrivileges_args args = new getPrivileges_args();
      args.setGroup(group);
      args.setOptions(options);
      sendBase("getPrivileges", args);
    }

    public List<TPrivilege> recv_getPrivileges() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      getPrivileges_result result = new getPrivileges_result();
      receiveBase(result, "getPrivileges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrivileges failed: unknown result");
    }

    public Map<String,List<TPrivilege>> getAllGroupPrivileges(GetAllGroupPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      send_getAllGroupPrivileges(options);
      return recv_getAllGroupPrivileges();
    }

    public void send_getAllGroupPrivileges(GetAllGroupPrivilegesTOptions options) throws org.apache.thrift.TException
    {
      getAllGroupPrivileges_args args = new getAllGroupPrivileges_args();
      args.setOptions(options);
      sendBase("getAllGroupPrivileges", args);
    }

    public Map<String,List<TPrivilege>> recv_getAllGroupPrivileges() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      getAllGroupPrivileges_result result = new getAllGroupPrivileges_result();
      receiveBase(result, "getAllGroupPrivileges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllGroupPrivileges failed: unknown result");
    }

    public List<TPrivilege> grantPrivileges(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      send_grantPrivileges(group, privileges, options);
      return recv_grantPrivileges();
    }

    public void send_grantPrivileges(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options) throws org.apache.thrift.TException
    {
      grantPrivileges_args args = new grantPrivileges_args();
      args.setGroup(group);
      args.setPrivileges(privileges);
      args.setOptions(options);
      sendBase("grantPrivileges", args);
    }

    public List<TPrivilege> recv_grantPrivileges() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      grantPrivileges_result result = new grantPrivileges_result();
      receiveBase(result, "grantPrivileges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "grantPrivileges failed: unknown result");
    }

    public List<TPrivilege> revokePrivileges(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options) throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      send_revokePrivileges(group, privileges, options);
      return recv_revokePrivileges();
    }

    public void send_revokePrivileges(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options) throws org.apache.thrift.TException
    {
      revokePrivileges_args args = new revokePrivileges_args();
      args.setGroup(group);
      args.setPrivileges(privileges);
      args.setOptions(options);
      sendBase("revokePrivileges", args);
    }

    public List<TPrivilege> recv_revokePrivileges() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException
    {
      revokePrivileges_result result = new revokePrivileges_result();
      receiveBase(result, "revokePrivileges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "revokePrivileges failed: unknown result");
    }

  }
  public static class AsyncClient extends alluxio.thrift.AlluxioService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPrivileges(String group, GetPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrivileges_call method_call = new getPrivileges_call(group, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrivileges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String group;
      private GetPrivilegesTOptions options;
      public getPrivileges_call(String group, GetPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group = group;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrivileges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrivileges_args args = new getPrivileges_args();
        args.setGroup(group);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TPrivilege> getResult() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrivileges();
      }
    }

    public void getAllGroupPrivileges(GetAllGroupPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllGroupPrivileges_call method_call = new getAllGroupPrivileges_call(options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllGroupPrivileges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetAllGroupPrivilegesTOptions options;
      public getAllGroupPrivileges_call(GetAllGroupPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllGroupPrivileges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllGroupPrivileges_args args = new getAllGroupPrivileges_args();
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<TPrivilege>> getResult() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllGroupPrivileges();
      }
    }

    public void grantPrivileges(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      grantPrivileges_call method_call = new grantPrivileges_call(group, privileges, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class grantPrivileges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String group;
      private List<TPrivilege> privileges;
      private GrantPrivilegesTOptions options;
      public grantPrivileges_call(String group, List<TPrivilege> privileges, GrantPrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group = group;
        this.privileges = privileges;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("grantPrivileges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        grantPrivileges_args args = new grantPrivileges_args();
        args.setGroup(group);
        args.setPrivileges(privileges);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TPrivilege> getResult() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_grantPrivileges();
      }
    }

    public void revokePrivileges(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      revokePrivileges_call method_call = new revokePrivileges_call(group, privileges, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class revokePrivileges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String group;
      private List<TPrivilege> privileges;
      private RevokePrivilegesTOptions options;
      public revokePrivileges_call(String group, List<TPrivilege> privileges, RevokePrivilegesTOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group = group;
        this.privileges = privileges;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("revokePrivileges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        revokePrivileges_args args = new revokePrivileges_args();
        args.setGroup(group);
        args.setPrivileges(privileges);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TPrivilege> getResult() throws alluxio.thrift.AlluxioTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_revokePrivileges();
      }
    }

  }

  public static class Processor<I extends Iface> extends alluxio.thrift.AlluxioService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPrivileges", new getPrivileges());
      processMap.put("getAllGroupPrivileges", new getAllGroupPrivileges());
      processMap.put("grantPrivileges", new grantPrivileges());
      processMap.put("revokePrivileges", new revokePrivileges());
      return processMap;
    }

    public static class getPrivileges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrivileges_args> {
      public getPrivileges() {
        super("getPrivileges");
      }

      public getPrivileges_args getEmptyArgsInstance() {
        return new getPrivileges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPrivileges_result getResult(I iface, getPrivileges_args args) throws org.apache.thrift.TException {
        getPrivileges_result result = new getPrivileges_result();
        try {
          result.success = iface.getPrivileges(args.group, args.options);
        } catch (alluxio.thrift.AlluxioTException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAllGroupPrivileges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllGroupPrivileges_args> {
      public getAllGroupPrivileges() {
        super("getAllGroupPrivileges");
      }

      public getAllGroupPrivileges_args getEmptyArgsInstance() {
        return new getAllGroupPrivileges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllGroupPrivileges_result getResult(I iface, getAllGroupPrivileges_args args) throws org.apache.thrift.TException {
        getAllGroupPrivileges_result result = new getAllGroupPrivileges_result();
        try {
          result.success = iface.getAllGroupPrivileges(args.options);
        } catch (alluxio.thrift.AlluxioTException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class grantPrivileges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, grantPrivileges_args> {
      public grantPrivileges() {
        super("grantPrivileges");
      }

      public grantPrivileges_args getEmptyArgsInstance() {
        return new grantPrivileges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public grantPrivileges_result getResult(I iface, grantPrivileges_args args) throws org.apache.thrift.TException {
        grantPrivileges_result result = new grantPrivileges_result();
        try {
          result.success = iface.grantPrivileges(args.group, args.privileges, args.options);
        } catch (alluxio.thrift.AlluxioTException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class revokePrivileges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, revokePrivileges_args> {
      public revokePrivileges() {
        super("revokePrivileges");
      }

      public revokePrivileges_args getEmptyArgsInstance() {
        return new revokePrivileges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public revokePrivileges_result getResult(I iface, revokePrivileges_args args) throws org.apache.thrift.TException {
        revokePrivileges_result result = new revokePrivileges_result();
        try {
          result.success = iface.revokePrivileges(args.group, args.privileges, args.options);
        } catch (alluxio.thrift.AlluxioTException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends alluxio.thrift.AlluxioService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPrivileges", new getPrivileges());
      processMap.put("getAllGroupPrivileges", new getAllGroupPrivileges());
      processMap.put("grantPrivileges", new grantPrivileges());
      processMap.put("revokePrivileges", new revokePrivileges());
      return processMap;
    }

    public static class getPrivileges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPrivileges_args, List<TPrivilege>> {
      public getPrivileges() {
        super("getPrivileges");
      }

      public getPrivileges_args getEmptyArgsInstance() {
        return new getPrivileges_args();
      }

      public AsyncMethodCallback<List<TPrivilege>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TPrivilege>>() { 
          public void onComplete(List<TPrivilege> o) {
            getPrivileges_result result = new getPrivileges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPrivileges_result result = new getPrivileges_result();
            if (e instanceof alluxio.thrift.AlluxioTException) {
                        result.e = (alluxio.thrift.AlluxioTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPrivileges_args args, org.apache.thrift.async.AsyncMethodCallback<List<TPrivilege>> resultHandler) throws TException {
        iface.getPrivileges(args.group, args.options,resultHandler);
      }
    }

    public static class getAllGroupPrivileges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllGroupPrivileges_args, Map<String,List<TPrivilege>>> {
      public getAllGroupPrivileges() {
        super("getAllGroupPrivileges");
      }

      public getAllGroupPrivileges_args getEmptyArgsInstance() {
        return new getAllGroupPrivileges_args();
      }

      public AsyncMethodCallback<Map<String,List<TPrivilege>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<TPrivilege>>>() { 
          public void onComplete(Map<String,List<TPrivilege>> o) {
            getAllGroupPrivileges_result result = new getAllGroupPrivileges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllGroupPrivileges_result result = new getAllGroupPrivileges_result();
            if (e instanceof alluxio.thrift.AlluxioTException) {
                        result.e = (alluxio.thrift.AlluxioTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllGroupPrivileges_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<TPrivilege>>> resultHandler) throws TException {
        iface.getAllGroupPrivileges(args.options,resultHandler);
      }
    }

    public static class grantPrivileges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, grantPrivileges_args, List<TPrivilege>> {
      public grantPrivileges() {
        super("grantPrivileges");
      }

      public grantPrivileges_args getEmptyArgsInstance() {
        return new grantPrivileges_args();
      }

      public AsyncMethodCallback<List<TPrivilege>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TPrivilege>>() { 
          public void onComplete(List<TPrivilege> o) {
            grantPrivileges_result result = new grantPrivileges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            grantPrivileges_result result = new grantPrivileges_result();
            if (e instanceof alluxio.thrift.AlluxioTException) {
                        result.e = (alluxio.thrift.AlluxioTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, grantPrivileges_args args, org.apache.thrift.async.AsyncMethodCallback<List<TPrivilege>> resultHandler) throws TException {
        iface.grantPrivileges(args.group, args.privileges, args.options,resultHandler);
      }
    }

    public static class revokePrivileges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, revokePrivileges_args, List<TPrivilege>> {
      public revokePrivileges() {
        super("revokePrivileges");
      }

      public revokePrivileges_args getEmptyArgsInstance() {
        return new revokePrivileges_args();
      }

      public AsyncMethodCallback<List<TPrivilege>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TPrivilege>>() { 
          public void onComplete(List<TPrivilege> o) {
            revokePrivileges_result result = new revokePrivileges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            revokePrivileges_result result = new revokePrivileges_result();
            if (e instanceof alluxio.thrift.AlluxioTException) {
                        result.e = (alluxio.thrift.AlluxioTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, revokePrivileges_args args, org.apache.thrift.async.AsyncMethodCallback<List<TPrivilege>> resultHandler) throws TException {
        iface.revokePrivileges(args.group, args.privileges, args.options,resultHandler);
      }
    }

  }

  public static class getPrivileges_args implements org.apache.thrift.TBase<getPrivileges_args, getPrivileges_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivileges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivileges_args");

    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrivileges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrivileges_argsTupleSchemeFactory());
    }

    private String group; // required
    private GetPrivilegesTOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the name of the group
       */
      GROUP((short)1, "group"),
      /**
       * method options
       */
      OPTIONS((short)2, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP
            return GROUP;
          case 2: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetPrivilegesTOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivileges_args.class, metaDataMap);
    }

    public getPrivileges_args() {
    }

    public getPrivileges_args(
      String group,
      GetPrivilegesTOptions options)
    {
      this();
      this.group = group;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivileges_args(getPrivileges_args other) {
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetOptions()) {
        this.options = new GetPrivilegesTOptions(other.options);
      }
    }

    public getPrivileges_args deepCopy() {
      return new getPrivileges_args(this);
    }

    @Override
    public void clear() {
      this.group = null;
      this.options = null;
    }

    /**
     * the name of the group
     */
    public String getGroup() {
      return this.group;
    }

    /**
     * the name of the group
     */
    public getPrivileges_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    /**
     * method options
     */
    public GetPrivilegesTOptions getOptions() {
      return this.options;
    }

    /**
     * method options
     */
    public getPrivileges_args setOptions(GetPrivilegesTOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((GetPrivilegesTOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP:
        return getGroup();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP:
        return isSetGroup();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivileges_args)
        return this.equals((getPrivileges_args)that);
      return false;
    }

    public boolean equals(getPrivileges_args that) {
      if (that == null)
        return false;

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group = true && (isSetGroup());
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrivileges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrivileges_args(");
      boolean first = true;

      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrivileges_argsStandardSchemeFactory implements SchemeFactory {
      public getPrivileges_argsStandardScheme getScheme() {
        return new getPrivileges_argsStandardScheme();
      }
    }

    private static class getPrivileges_argsStandardScheme extends StandardScheme<getPrivileges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivileges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new GetPrivilegesTOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivileges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivileges_argsTupleSchemeFactory implements SchemeFactory {
      public getPrivileges_argsTupleScheme getScheme() {
        return new getPrivileges_argsTupleScheme();
      }
    }

    private static class getPrivileges_argsTupleScheme extends TupleScheme<getPrivileges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup()) {
          optionals.set(0);
        }
        if (struct.isSetOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(1)) {
          struct.options = new GetPrivilegesTOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class getPrivileges_result implements org.apache.thrift.TBase<getPrivileges_result, getPrivileges_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivileges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivileges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrivileges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrivileges_resultTupleSchemeFactory());
    }

    private List<TPrivilege> success; // required
    private alluxio.thrift.AlluxioTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivileges_result.class, metaDataMap);
    }

    public getPrivileges_result() {
    }

    public getPrivileges_result(
      List<TPrivilege> success,
      alluxio.thrift.AlluxioTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivileges_result(getPrivileges_result other) {
      if (other.isSetSuccess()) {
        List<TPrivilege> __this__success = new ArrayList<TPrivilege>(other.success.size());
        for (TPrivilege other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new alluxio.thrift.AlluxioTException(other.e);
      }
    }

    public getPrivileges_result deepCopy() {
      return new getPrivileges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPrivilege> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPrivilege elem) {
      if (this.success == null) {
        this.success = new ArrayList<TPrivilege>();
      }
      this.success.add(elem);
    }

    public List<TPrivilege> getSuccess() {
      return this.success;
    }

    public getPrivileges_result setSuccess(List<TPrivilege> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public alluxio.thrift.AlluxioTException getE() {
      return this.e;
    }

    public getPrivileges_result setE(alluxio.thrift.AlluxioTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TPrivilege>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((alluxio.thrift.AlluxioTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivileges_result)
        return this.equals((getPrivileges_result)that);
      return false;
    }

    public boolean equals(getPrivileges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrivileges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrivileges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrivileges_resultStandardSchemeFactory implements SchemeFactory {
      public getPrivileges_resultStandardScheme getScheme() {
        return new getPrivileges_resultStandardScheme();
      }
    }

    private static class getPrivileges_resultStandardScheme extends StandardScheme<getPrivileges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivileges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TPrivilege>(_list0.size);
                  TPrivilege _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new alluxio.thrift.AlluxioTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivileges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (TPrivilege _iter3 : struct.success)
            {
              oprot.writeI32(_iter3.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivileges_resultTupleSchemeFactory implements SchemeFactory {
      public getPrivileges_resultTupleScheme getScheme() {
        return new getPrivileges_resultTupleScheme();
      }
    }

    private static class getPrivileges_resultTupleScheme extends TupleScheme<getPrivileges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPrivilege _iter4 : struct.success)
            {
              oprot.writeI32(_iter4.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<TPrivilege>(_list5.size);
            TPrivilege _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new alluxio.thrift.AlluxioTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAllGroupPrivileges_args implements org.apache.thrift.TBase<getAllGroupPrivileges_args, getAllGroupPrivileges_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllGroupPrivileges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllGroupPrivileges_args");

    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllGroupPrivileges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllGroupPrivileges_argsTupleSchemeFactory());
    }

    private GetAllGroupPrivilegesTOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * method options
       */
      OPTIONS((short)1, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAllGroupPrivilegesTOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllGroupPrivileges_args.class, metaDataMap);
    }

    public getAllGroupPrivileges_args() {
    }

    public getAllGroupPrivileges_args(
      GetAllGroupPrivilegesTOptions options)
    {
      this();
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllGroupPrivileges_args(getAllGroupPrivileges_args other) {
      if (other.isSetOptions()) {
        this.options = new GetAllGroupPrivilegesTOptions(other.options);
      }
    }

    public getAllGroupPrivileges_args deepCopy() {
      return new getAllGroupPrivileges_args(this);
    }

    @Override
    public void clear() {
      this.options = null;
    }

    /**
     * method options
     */
    public GetAllGroupPrivilegesTOptions getOptions() {
      return this.options;
    }

    /**
     * method options
     */
    public getAllGroupPrivileges_args setOptions(GetAllGroupPrivilegesTOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((GetAllGroupPrivilegesTOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllGroupPrivileges_args)
        return this.equals((getAllGroupPrivileges_args)that);
      return false;
    }

    public boolean equals(getAllGroupPrivileges_args that) {
      if (that == null)
        return false;

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllGroupPrivileges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllGroupPrivileges_args(");
      boolean first = true;

      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllGroupPrivileges_argsStandardSchemeFactory implements SchemeFactory {
      public getAllGroupPrivileges_argsStandardScheme getScheme() {
        return new getAllGroupPrivileges_argsStandardScheme();
      }
    }

    private static class getAllGroupPrivileges_argsStandardScheme extends StandardScheme<getAllGroupPrivileges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllGroupPrivileges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new GetAllGroupPrivilegesTOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllGroupPrivileges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllGroupPrivileges_argsTupleSchemeFactory implements SchemeFactory {
      public getAllGroupPrivileges_argsTupleScheme getScheme() {
        return new getAllGroupPrivileges_argsTupleScheme();
      }
    }

    private static class getAllGroupPrivileges_argsTupleScheme extends TupleScheme<getAllGroupPrivileges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllGroupPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOptions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllGroupPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.options = new GetAllGroupPrivilegesTOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class getAllGroupPrivileges_result implements org.apache.thrift.TBase<getAllGroupPrivileges_result, getAllGroupPrivileges_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllGroupPrivileges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllGroupPrivileges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllGroupPrivileges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllGroupPrivileges_resultTupleSchemeFactory());
    }

    private Map<String,List<TPrivilege>> success; // required
    private alluxio.thrift.AlluxioTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class)))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllGroupPrivileges_result.class, metaDataMap);
    }

    public getAllGroupPrivileges_result() {
    }

    public getAllGroupPrivileges_result(
      Map<String,List<TPrivilege>> success,
      alluxio.thrift.AlluxioTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllGroupPrivileges_result(getAllGroupPrivileges_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<TPrivilege>> __this__success = new HashMap<String,List<TPrivilege>>(other.success.size());
        for (Map.Entry<String, List<TPrivilege>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<TPrivilege> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<TPrivilege> __this__success_copy_value = new ArrayList<TPrivilege>(other_element_value.size());
          for (TPrivilege other_element_value_element : other_element_value) {
            __this__success_copy_value.add(other_element_value_element);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new alluxio.thrift.AlluxioTException(other.e);
      }
    }

    public getAllGroupPrivileges_result deepCopy() {
      return new getAllGroupPrivileges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<TPrivilege> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<TPrivilege>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<TPrivilege>> getSuccess() {
      return this.success;
    }

    public getAllGroupPrivileges_result setSuccess(Map<String,List<TPrivilege>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public alluxio.thrift.AlluxioTException getE() {
      return this.e;
    }

    public getAllGroupPrivileges_result setE(alluxio.thrift.AlluxioTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<TPrivilege>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((alluxio.thrift.AlluxioTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllGroupPrivileges_result)
        return this.equals((getAllGroupPrivileges_result)that);
      return false;
    }

    public boolean equals(getAllGroupPrivileges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllGroupPrivileges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllGroupPrivileges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllGroupPrivileges_resultStandardSchemeFactory implements SchemeFactory {
      public getAllGroupPrivileges_resultStandardScheme getScheme() {
        return new getAllGroupPrivileges_resultStandardScheme();
      }
    }

    private static class getAllGroupPrivileges_resultStandardScheme extends StandardScheme<getAllGroupPrivileges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllGroupPrivileges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<TPrivilege>>(2*_map8.size);
                  String _key9;
                  List<TPrivilege> _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                      _val10 = new ArrayList<TPrivilege>(_list12.size);
                      TPrivilege _elem13;
                      for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                      {
                        _elem13 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                        _val10.add(_elem13);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new alluxio.thrift.AlluxioTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllGroupPrivileges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<TPrivilege>> _iter15 : struct.success.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter15.getValue().size()));
                for (TPrivilege _iter16 : _iter15.getValue())
                {
                  oprot.writeI32(_iter16.getValue());
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllGroupPrivileges_resultTupleSchemeFactory implements SchemeFactory {
      public getAllGroupPrivileges_resultTupleScheme getScheme() {
        return new getAllGroupPrivileges_resultTupleScheme();
      }
    }

    private static class getAllGroupPrivileges_resultTupleScheme extends TupleScheme<getAllGroupPrivileges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllGroupPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<TPrivilege>> _iter17 : struct.success.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              {
                oprot.writeI32(_iter17.getValue().size());
                for (TPrivilege _iter18 : _iter17.getValue())
                {
                  oprot.writeI32(_iter18.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllGroupPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<TPrivilege>>(2*_map19.size);
            String _key20;
            List<TPrivilege> _val21;
            for (int _i22 = 0; _i22 < _map19.size; ++_i22)
            {
              _key20 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _val21 = new ArrayList<TPrivilege>(_list23.size);
                TPrivilege _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                  _val21.add(_elem24);
                }
              }
              struct.success.put(_key20, _val21);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new alluxio.thrift.AlluxioTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class grantPrivileges_args implements org.apache.thrift.TBase<grantPrivileges_args, grantPrivileges_args._Fields>, java.io.Serializable, Cloneable, Comparable<grantPrivileges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("grantPrivileges_args");

    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("privileges", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new grantPrivileges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new grantPrivileges_argsTupleSchemeFactory());
    }

    private String group; // required
    private List<TPrivilege> privileges; // required
    private GrantPrivilegesTOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the name of the group
       */
      GROUP((short)1, "group"),
      /**
       * the privileges to grant
       */
      PRIVILEGES((short)2, "privileges"),
      /**
       * method options
       */
      OPTIONS((short)3, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP
            return GROUP;
          case 2: // PRIVILEGES
            return PRIVILEGES;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("privileges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GrantPrivilegesTOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(grantPrivileges_args.class, metaDataMap);
    }

    public grantPrivileges_args() {
    }

    public grantPrivileges_args(
      String group,
      List<TPrivilege> privileges,
      GrantPrivilegesTOptions options)
    {
      this();
      this.group = group;
      this.privileges = privileges;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantPrivileges_args(grantPrivileges_args other) {
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetPrivileges()) {
        List<TPrivilege> __this__privileges = new ArrayList<TPrivilege>(other.privileges.size());
        for (TPrivilege other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetOptions()) {
        this.options = new GrantPrivilegesTOptions(other.options);
      }
    }

    public grantPrivileges_args deepCopy() {
      return new grantPrivileges_args(this);
    }

    @Override
    public void clear() {
      this.group = null;
      this.privileges = null;
      this.options = null;
    }

    /**
     * the name of the group
     */
    public String getGroup() {
      return this.group;
    }

    /**
     * the name of the group
     */
    public grantPrivileges_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<TPrivilege> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(TPrivilege elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<TPrivilege>();
      }
      this.privileges.add(elem);
    }

    /**
     * the privileges to grant
     */
    public List<TPrivilege> getPrivileges() {
      return this.privileges;
    }

    /**
     * the privileges to grant
     */
    public grantPrivileges_args setPrivileges(List<TPrivilege> privileges) {
      this.privileges = privileges;
      return this;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    /** Returns true if field privileges is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setPrivilegesIsSet(boolean value) {
      if (!value) {
        this.privileges = null;
      }
    }

    /**
     * method options
     */
    public GrantPrivilegesTOptions getOptions() {
      return this.options;
    }

    /**
     * method options
     */
    public grantPrivileges_args setOptions(GrantPrivilegesTOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<TPrivilege>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((GrantPrivilegesTOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP:
        return getGroup();

      case PRIVILEGES:
        return getPrivileges();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP:
        return isSetGroup();
      case PRIVILEGES:
        return isSetPrivileges();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantPrivileges_args)
        return this.equals((grantPrivileges_args)that);
      return false;
    }

    public boolean equals(grantPrivileges_args that) {
      if (that == null)
        return false;

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group = true && (isSetGroup());
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_privileges = true && (isSetPrivileges());
      list.add(present_privileges);
      if (present_privileges)
        list.add(privileges);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(grantPrivileges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivileges()).compareTo(other.isSetPrivileges());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivileges()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privileges, other.privileges);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantPrivileges_args(");
      boolean first = true;

      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class grantPrivileges_argsStandardSchemeFactory implements SchemeFactory {
      public grantPrivileges_argsStandardScheme getScheme() {
        return new grantPrivileges_argsStandardScheme();
      }
    }

    private static class grantPrivileges_argsStandardScheme extends StandardScheme<grantPrivileges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, grantPrivileges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIVILEGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.privileges = new ArrayList<TPrivilege>(_list26.size);
                  TPrivilege _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                    struct.privileges.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setPrivilegesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new GrantPrivilegesTOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, grantPrivileges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.privileges != null) {
          oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.privileges.size()));
            for (TPrivilege _iter29 : struct.privileges)
            {
              oprot.writeI32(_iter29.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class grantPrivileges_argsTupleSchemeFactory implements SchemeFactory {
      public grantPrivileges_argsTupleScheme getScheme() {
        return new grantPrivileges_argsTupleScheme();
      }
    }

    private static class grantPrivileges_argsTupleScheme extends TupleScheme<grantPrivileges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, grantPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup()) {
          optionals.set(0);
        }
        if (struct.isSetPrivileges()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetPrivileges()) {
          {
            oprot.writeI32(struct.privileges.size());
            for (TPrivilege _iter30 : struct.privileges)
            {
              oprot.writeI32(_iter30.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, grantPrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.privileges = new ArrayList<TPrivilege>(_list31.size);
            TPrivilege _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
              struct.privileges.add(_elem32);
            }
          }
          struct.setPrivilegesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new GrantPrivilegesTOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class grantPrivileges_result implements org.apache.thrift.TBase<grantPrivileges_result, grantPrivileges_result._Fields>, java.io.Serializable, Cloneable, Comparable<grantPrivileges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("grantPrivileges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new grantPrivileges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new grantPrivileges_resultTupleSchemeFactory());
    }

    private List<TPrivilege> success; // required
    private alluxio.thrift.AlluxioTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(grantPrivileges_result.class, metaDataMap);
    }

    public grantPrivileges_result() {
    }

    public grantPrivileges_result(
      List<TPrivilege> success,
      alluxio.thrift.AlluxioTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantPrivileges_result(grantPrivileges_result other) {
      if (other.isSetSuccess()) {
        List<TPrivilege> __this__success = new ArrayList<TPrivilege>(other.success.size());
        for (TPrivilege other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new alluxio.thrift.AlluxioTException(other.e);
      }
    }

    public grantPrivileges_result deepCopy() {
      return new grantPrivileges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPrivilege> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPrivilege elem) {
      if (this.success == null) {
        this.success = new ArrayList<TPrivilege>();
      }
      this.success.add(elem);
    }

    public List<TPrivilege> getSuccess() {
      return this.success;
    }

    public grantPrivileges_result setSuccess(List<TPrivilege> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public alluxio.thrift.AlluxioTException getE() {
      return this.e;
    }

    public grantPrivileges_result setE(alluxio.thrift.AlluxioTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TPrivilege>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((alluxio.thrift.AlluxioTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantPrivileges_result)
        return this.equals((grantPrivileges_result)that);
      return false;
    }

    public boolean equals(grantPrivileges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(grantPrivileges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantPrivileges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class grantPrivileges_resultStandardSchemeFactory implements SchemeFactory {
      public grantPrivileges_resultStandardScheme getScheme() {
        return new grantPrivileges_resultStandardScheme();
      }
    }

    private static class grantPrivileges_resultStandardScheme extends StandardScheme<grantPrivileges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, grantPrivileges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<TPrivilege>(_list34.size);
                  TPrivilege _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                    struct.success.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new alluxio.thrift.AlluxioTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, grantPrivileges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (TPrivilege _iter37 : struct.success)
            {
              oprot.writeI32(_iter37.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class grantPrivileges_resultTupleSchemeFactory implements SchemeFactory {
      public grantPrivileges_resultTupleScheme getScheme() {
        return new grantPrivileges_resultTupleScheme();
      }
    }

    private static class grantPrivileges_resultTupleScheme extends TupleScheme<grantPrivileges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, grantPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPrivilege _iter38 : struct.success)
            {
              oprot.writeI32(_iter38.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, grantPrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<TPrivilege>(_list39.size);
            TPrivilege _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
              struct.success.add(_elem40);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new alluxio.thrift.AlluxioTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class revokePrivileges_args implements org.apache.thrift.TBase<revokePrivileges_args, revokePrivileges_args._Fields>, java.io.Serializable, Cloneable, Comparable<revokePrivileges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokePrivileges_args");

    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("privileges", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revokePrivileges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new revokePrivileges_argsTupleSchemeFactory());
    }

    private String group; // required
    private List<TPrivilege> privileges; // required
    private RevokePrivilegesTOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the name of the group
       */
      GROUP((short)1, "group"),
      /**
       * the privileges to revoke
       */
      PRIVILEGES((short)2, "privileges"),
      /**
       * method options
       */
      OPTIONS((short)3, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP
            return GROUP;
          case 2: // PRIVILEGES
            return PRIVILEGES;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("privileges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RevokePrivilegesTOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokePrivileges_args.class, metaDataMap);
    }

    public revokePrivileges_args() {
    }

    public revokePrivileges_args(
      String group,
      List<TPrivilege> privileges,
      RevokePrivilegesTOptions options)
    {
      this();
      this.group = group;
      this.privileges = privileges;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokePrivileges_args(revokePrivileges_args other) {
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetPrivileges()) {
        List<TPrivilege> __this__privileges = new ArrayList<TPrivilege>(other.privileges.size());
        for (TPrivilege other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetOptions()) {
        this.options = new RevokePrivilegesTOptions(other.options);
      }
    }

    public revokePrivileges_args deepCopy() {
      return new revokePrivileges_args(this);
    }

    @Override
    public void clear() {
      this.group = null;
      this.privileges = null;
      this.options = null;
    }

    /**
     * the name of the group
     */
    public String getGroup() {
      return this.group;
    }

    /**
     * the name of the group
     */
    public revokePrivileges_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<TPrivilege> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(TPrivilege elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<TPrivilege>();
      }
      this.privileges.add(elem);
    }

    /**
     * the privileges to revoke
     */
    public List<TPrivilege> getPrivileges() {
      return this.privileges;
    }

    /**
     * the privileges to revoke
     */
    public revokePrivileges_args setPrivileges(List<TPrivilege> privileges) {
      this.privileges = privileges;
      return this;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    /** Returns true if field privileges is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setPrivilegesIsSet(boolean value) {
      if (!value) {
        this.privileges = null;
      }
    }

    /**
     * method options
     */
    public RevokePrivilegesTOptions getOptions() {
      return this.options;
    }

    /**
     * method options
     */
    public revokePrivileges_args setOptions(RevokePrivilegesTOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<TPrivilege>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((RevokePrivilegesTOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP:
        return getGroup();

      case PRIVILEGES:
        return getPrivileges();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP:
        return isSetGroup();
      case PRIVILEGES:
        return isSetPrivileges();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokePrivileges_args)
        return this.equals((revokePrivileges_args)that);
      return false;
    }

    public boolean equals(revokePrivileges_args that) {
      if (that == null)
        return false;

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group = true && (isSetGroup());
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_privileges = true && (isSetPrivileges());
      list.add(present_privileges);
      if (present_privileges)
        list.add(privileges);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(revokePrivileges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivileges()).compareTo(other.isSetPrivileges());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivileges()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privileges, other.privileges);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokePrivileges_args(");
      boolean first = true;

      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokePrivileges_argsStandardSchemeFactory implements SchemeFactory {
      public revokePrivileges_argsStandardScheme getScheme() {
        return new revokePrivileges_argsStandardScheme();
      }
    }

    private static class revokePrivileges_argsStandardScheme extends StandardScheme<revokePrivileges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokePrivileges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIVILEGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.privileges = new ArrayList<TPrivilege>(_list42.size);
                  TPrivilege _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                    struct.privileges.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setPrivilegesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new RevokePrivilegesTOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokePrivileges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.privileges != null) {
          oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.privileges.size()));
            for (TPrivilege _iter45 : struct.privileges)
            {
              oprot.writeI32(_iter45.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokePrivileges_argsTupleSchemeFactory implements SchemeFactory {
      public revokePrivileges_argsTupleScheme getScheme() {
        return new revokePrivileges_argsTupleScheme();
      }
    }

    private static class revokePrivileges_argsTupleScheme extends TupleScheme<revokePrivileges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokePrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup()) {
          optionals.set(0);
        }
        if (struct.isSetPrivileges()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetPrivileges()) {
          {
            oprot.writeI32(struct.privileges.size());
            for (TPrivilege _iter46 : struct.privileges)
            {
              oprot.writeI32(_iter46.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokePrivileges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.privileges = new ArrayList<TPrivilege>(_list47.size);
            TPrivilege _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
              struct.privileges.add(_elem48);
            }
          }
          struct.setPrivilegesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new RevokePrivilegesTOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class revokePrivileges_result implements org.apache.thrift.TBase<revokePrivileges_result, revokePrivileges_result._Fields>, java.io.Serializable, Cloneable, Comparable<revokePrivileges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokePrivileges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revokePrivileges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new revokePrivileges_resultTupleSchemeFactory());
    }

    private List<TPrivilege> success; // required
    private alluxio.thrift.AlluxioTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilege.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokePrivileges_result.class, metaDataMap);
    }

    public revokePrivileges_result() {
    }

    public revokePrivileges_result(
      List<TPrivilege> success,
      alluxio.thrift.AlluxioTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokePrivileges_result(revokePrivileges_result other) {
      if (other.isSetSuccess()) {
        List<TPrivilege> __this__success = new ArrayList<TPrivilege>(other.success.size());
        for (TPrivilege other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new alluxio.thrift.AlluxioTException(other.e);
      }
    }

    public revokePrivileges_result deepCopy() {
      return new revokePrivileges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPrivilege> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPrivilege elem) {
      if (this.success == null) {
        this.success = new ArrayList<TPrivilege>();
      }
      this.success.add(elem);
    }

    public List<TPrivilege> getSuccess() {
      return this.success;
    }

    public revokePrivileges_result setSuccess(List<TPrivilege> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public alluxio.thrift.AlluxioTException getE() {
      return this.e;
    }

    public revokePrivileges_result setE(alluxio.thrift.AlluxioTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TPrivilege>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((alluxio.thrift.AlluxioTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokePrivileges_result)
        return this.equals((revokePrivileges_result)that);
      return false;
    }

    public boolean equals(revokePrivileges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(revokePrivileges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokePrivileges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokePrivileges_resultStandardSchemeFactory implements SchemeFactory {
      public revokePrivileges_resultStandardScheme getScheme() {
        return new revokePrivileges_resultStandardScheme();
      }
    }

    private static class revokePrivileges_resultStandardScheme extends StandardScheme<revokePrivileges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokePrivileges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<TPrivilege>(_list50.size);
                  TPrivilege _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
                    struct.success.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new alluxio.thrift.AlluxioTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokePrivileges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (TPrivilege _iter53 : struct.success)
            {
              oprot.writeI32(_iter53.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokePrivileges_resultTupleSchemeFactory implements SchemeFactory {
      public revokePrivileges_resultTupleScheme getScheme() {
        return new revokePrivileges_resultTupleScheme();
      }
    }

    private static class revokePrivileges_resultTupleScheme extends TupleScheme<revokePrivileges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokePrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPrivilege _iter54 : struct.success)
            {
              oprot.writeI32(_iter54.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokePrivileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<TPrivilege>(_list55.size);
            TPrivilege _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = alluxio.thrift.TPrivilege.findByValue(iprot.readI32());
              struct.success.add(_elem56);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new alluxio.thrift.AlluxioTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
