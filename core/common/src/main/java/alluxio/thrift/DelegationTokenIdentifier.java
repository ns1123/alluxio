/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class DelegationTokenIdentifier implements org.apache.thrift.TBase<DelegationTokenIdentifier, DelegationTokenIdentifier._Fields>, java.io.Serializable, Cloneable, Comparable<DelegationTokenIdentifier> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelegationTokenIdentifier");

  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RENEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("renewer", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REAL_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("realUser", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ISSUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("issueDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNumber", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField MASTER_KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("masterKeyId", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DelegationTokenIdentifierStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DelegationTokenIdentifierTupleSchemeFactory());
  }

  private String owner; // required
  private String renewer; // required
  private String realUser; // required
  private long issueDate; // required
  private long maxDate; // required
  private long sequenceNumber; // required
  private long masterKeyId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OWNER((short)2, "owner"),
    RENEWER((short)3, "renewer"),
    REAL_USER((short)4, "realUser"),
    ISSUE_DATE((short)5, "issueDate"),
    MAX_DATE((short)6, "maxDate"),
    SEQUENCE_NUMBER((short)7, "sequenceNumber"),
    MASTER_KEY_ID((short)8, "masterKeyId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // OWNER
          return OWNER;
        case 3: // RENEWER
          return RENEWER;
        case 4: // REAL_USER
          return REAL_USER;
        case 5: // ISSUE_DATE
          return ISSUE_DATE;
        case 6: // MAX_DATE
          return MAX_DATE;
        case 7: // SEQUENCE_NUMBER
          return SEQUENCE_NUMBER;
        case 8: // MASTER_KEY_ID
          return MASTER_KEY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUEDATE_ISSET_ID = 0;
  private static final int __MAXDATE_ISSET_ID = 1;
  private static final int __SEQUENCENUMBER_ISSET_ID = 2;
  private static final int __MASTERKEYID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RENEWER, new org.apache.thrift.meta_data.FieldMetaData("renewer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_USER, new org.apache.thrift.meta_data.FieldMetaData("realUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("issueDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_DATE, new org.apache.thrift.meta_data.FieldMetaData("maxDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("sequenceNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MASTER_KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("masterKeyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelegationTokenIdentifier.class, metaDataMap);
  }

  public DelegationTokenIdentifier() {
  }

  public DelegationTokenIdentifier(
    String owner,
    String renewer,
    String realUser,
    long issueDate,
    long maxDate,
    long sequenceNumber,
    long masterKeyId)
  {
    this();
    this.owner = owner;
    this.renewer = renewer;
    this.realUser = realUser;
    this.issueDate = issueDate;
    setIssueDateIsSet(true);
    this.maxDate = maxDate;
    setMaxDateIsSet(true);
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    this.masterKeyId = masterKeyId;
    setMasterKeyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DelegationTokenIdentifier(DelegationTokenIdentifier other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetRenewer()) {
      this.renewer = other.renewer;
    }
    if (other.isSetRealUser()) {
      this.realUser = other.realUser;
    }
    this.issueDate = other.issueDate;
    this.maxDate = other.maxDate;
    this.sequenceNumber = other.sequenceNumber;
    this.masterKeyId = other.masterKeyId;
  }

  public DelegationTokenIdentifier deepCopy() {
    return new DelegationTokenIdentifier(this);
  }

  @Override
  public void clear() {
    this.owner = null;
    this.renewer = null;
    this.realUser = null;
    setIssueDateIsSet(false);
    this.issueDate = 0;
    setMaxDateIsSet(false);
    this.maxDate = 0;
    setSequenceNumberIsSet(false);
    this.sequenceNumber = 0;
    setMasterKeyIdIsSet(false);
    this.masterKeyId = 0;
  }

  public String getOwner() {
    return this.owner;
  }

  public DelegationTokenIdentifier setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getRenewer() {
    return this.renewer;
  }

  public DelegationTokenIdentifier setRenewer(String renewer) {
    this.renewer = renewer;
    return this;
  }

  public void unsetRenewer() {
    this.renewer = null;
  }

  /** Returns true if field renewer is set (has been assigned a value) and false otherwise */
  public boolean isSetRenewer() {
    return this.renewer != null;
  }

  public void setRenewerIsSet(boolean value) {
    if (!value) {
      this.renewer = null;
    }
  }

  public String getRealUser() {
    return this.realUser;
  }

  public DelegationTokenIdentifier setRealUser(String realUser) {
    this.realUser = realUser;
    return this;
  }

  public void unsetRealUser() {
    this.realUser = null;
  }

  /** Returns true if field realUser is set (has been assigned a value) and false otherwise */
  public boolean isSetRealUser() {
    return this.realUser != null;
  }

  public void setRealUserIsSet(boolean value) {
    if (!value) {
      this.realUser = null;
    }
  }

  public long getIssueDate() {
    return this.issueDate;
  }

  public DelegationTokenIdentifier setIssueDate(long issueDate) {
    this.issueDate = issueDate;
    setIssueDateIsSet(true);
    return this;
  }

  public void unsetIssueDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUEDATE_ISSET_ID);
  }

  /** Returns true if field issueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUEDATE_ISSET_ID);
  }

  public void setIssueDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUEDATE_ISSET_ID, value);
  }

  public long getMaxDate() {
    return this.maxDate;
  }

  public DelegationTokenIdentifier setMaxDate(long maxDate) {
    this.maxDate = maxDate;
    setMaxDateIsSet(true);
    return this;
  }

  public void unsetMaxDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXDATE_ISSET_ID);
  }

  /** Returns true if field maxDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDate() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXDATE_ISSET_ID);
  }

  public void setMaxDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXDATE_ISSET_ID, value);
  }

  public long getSequenceNumber() {
    return this.sequenceNumber;
  }

  public DelegationTokenIdentifier setSequenceNumber(long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    return this;
  }

  public void unsetSequenceNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  /** Returns true if field sequenceNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  public void setSequenceNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID, value);
  }

  public long getMasterKeyId() {
    return this.masterKeyId;
  }

  public DelegationTokenIdentifier setMasterKeyId(long masterKeyId) {
    this.masterKeyId = masterKeyId;
    setMasterKeyIdIsSet(true);
    return this;
  }

  public void unsetMasterKeyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERKEYID_ISSET_ID);
  }

  /** Returns true if field masterKeyId is set (has been assigned a value) and false otherwise */
  public boolean isSetMasterKeyId() {
    return EncodingUtils.testBit(__isset_bitfield, __MASTERKEYID_ISSET_ID);
  }

  public void setMasterKeyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERKEYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case RENEWER:
      if (value == null) {
        unsetRenewer();
      } else {
        setRenewer((String)value);
      }
      break;

    case REAL_USER:
      if (value == null) {
        unsetRealUser();
      } else {
        setRealUser((String)value);
      }
      break;

    case ISSUE_DATE:
      if (value == null) {
        unsetIssueDate();
      } else {
        setIssueDate((Long)value);
      }
      break;

    case MAX_DATE:
      if (value == null) {
        unsetMaxDate();
      } else {
        setMaxDate((Long)value);
      }
      break;

    case SEQUENCE_NUMBER:
      if (value == null) {
        unsetSequenceNumber();
      } else {
        setSequenceNumber((Long)value);
      }
      break;

    case MASTER_KEY_ID:
      if (value == null) {
        unsetMasterKeyId();
      } else {
        setMasterKeyId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER:
      return getOwner();

    case RENEWER:
      return getRenewer();

    case REAL_USER:
      return getRealUser();

    case ISSUE_DATE:
      return getIssueDate();

    case MAX_DATE:
      return getMaxDate();

    case SEQUENCE_NUMBER:
      return getSequenceNumber();

    case MASTER_KEY_ID:
      return getMasterKeyId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OWNER:
      return isSetOwner();
    case RENEWER:
      return isSetRenewer();
    case REAL_USER:
      return isSetRealUser();
    case ISSUE_DATE:
      return isSetIssueDate();
    case MAX_DATE:
      return isSetMaxDate();
    case SEQUENCE_NUMBER:
      return isSetSequenceNumber();
    case MASTER_KEY_ID:
      return isSetMasterKeyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DelegationTokenIdentifier)
      return this.equals((DelegationTokenIdentifier)that);
    return false;
  }

  public boolean equals(DelegationTokenIdentifier that) {
    if (that == null)
      return false;

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_renewer = true && this.isSetRenewer();
    boolean that_present_renewer = true && that.isSetRenewer();
    if (this_present_renewer || that_present_renewer) {
      if (!(this_present_renewer && that_present_renewer))
        return false;
      if (!this.renewer.equals(that.renewer))
        return false;
    }

    boolean this_present_realUser = true && this.isSetRealUser();
    boolean that_present_realUser = true && that.isSetRealUser();
    if (this_present_realUser || that_present_realUser) {
      if (!(this_present_realUser && that_present_realUser))
        return false;
      if (!this.realUser.equals(that.realUser))
        return false;
    }

    boolean this_present_issueDate = true;
    boolean that_present_issueDate = true;
    if (this_present_issueDate || that_present_issueDate) {
      if (!(this_present_issueDate && that_present_issueDate))
        return false;
      if (this.issueDate != that.issueDate)
        return false;
    }

    boolean this_present_maxDate = true;
    boolean that_present_maxDate = true;
    if (this_present_maxDate || that_present_maxDate) {
      if (!(this_present_maxDate && that_present_maxDate))
        return false;
      if (this.maxDate != that.maxDate)
        return false;
    }

    boolean this_present_sequenceNumber = true;
    boolean that_present_sequenceNumber = true;
    if (this_present_sequenceNumber || that_present_sequenceNumber) {
      if (!(this_present_sequenceNumber && that_present_sequenceNumber))
        return false;
      if (this.sequenceNumber != that.sequenceNumber)
        return false;
    }

    boolean this_present_masterKeyId = true;
    boolean that_present_masterKeyId = true;
    if (this_present_masterKeyId || that_present_masterKeyId) {
      if (!(this_present_masterKeyId && that_present_masterKeyId))
        return false;
      if (this.masterKeyId != that.masterKeyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_renewer = true && (isSetRenewer());
    list.add(present_renewer);
    if (present_renewer)
      list.add(renewer);

    boolean present_realUser = true && (isSetRealUser());
    list.add(present_realUser);
    if (present_realUser)
      list.add(realUser);

    boolean present_issueDate = true;
    list.add(present_issueDate);
    if (present_issueDate)
      list.add(issueDate);

    boolean present_maxDate = true;
    list.add(present_maxDate);
    if (present_maxDate)
      list.add(maxDate);

    boolean present_sequenceNumber = true;
    list.add(present_sequenceNumber);
    if (present_sequenceNumber)
      list.add(sequenceNumber);

    boolean present_masterKeyId = true;
    list.add(present_masterKeyId);
    if (present_masterKeyId)
      list.add(masterKeyId);

    return list.hashCode();
  }

  @Override
  public int compareTo(DelegationTokenIdentifier other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRenewer()).compareTo(other.isSetRenewer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRenewer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renewer, other.renewer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealUser()).compareTo(other.isSetRealUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realUser, other.realUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueDate()).compareTo(other.isSetIssueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueDate, other.issueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDate()).compareTo(other.isSetMaxDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDate, other.maxDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNumber()).compareTo(other.isSetSequenceNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNumber, other.sequenceNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMasterKeyId()).compareTo(other.isSetMasterKeyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMasterKeyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterKeyId, other.masterKeyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DelegationTokenIdentifier(");
    boolean first = true;

    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("renewer:");
    if (this.renewer == null) {
      sb.append("null");
    } else {
      sb.append(this.renewer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realUser:");
    if (this.realUser == null) {
      sb.append("null");
    } else {
      sb.append(this.realUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueDate:");
    sb.append(this.issueDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDate:");
    sb.append(this.maxDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNumber:");
    sb.append(this.sequenceNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("masterKeyId:");
    sb.append(this.masterKeyId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DelegationTokenIdentifierStandardSchemeFactory implements SchemeFactory {
    public DelegationTokenIdentifierStandardScheme getScheme() {
      return new DelegationTokenIdentifierStandardScheme();
    }
  }

  private static class DelegationTokenIdentifierStandardScheme extends StandardScheme<DelegationTokenIdentifier> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DelegationTokenIdentifier struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RENEWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.renewer = iprot.readString();
              struct.setRenewerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REAL_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realUser = iprot.readString();
              struct.setRealUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISSUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.issueDate = iprot.readI64();
              struct.setIssueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxDate = iprot.readI64();
              struct.setMaxDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceNumber = iprot.readI64();
              struct.setSequenceNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MASTER_KEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.masterKeyId = iprot.readI64();
              struct.setMasterKeyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DelegationTokenIdentifier struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.renewer != null) {
        oprot.writeFieldBegin(RENEWER_FIELD_DESC);
        oprot.writeString(struct.renewer);
        oprot.writeFieldEnd();
      }
      if (struct.realUser != null) {
        oprot.writeFieldBegin(REAL_USER_FIELD_DESC);
        oprot.writeString(struct.realUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISSUE_DATE_FIELD_DESC);
      oprot.writeI64(struct.issueDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_DATE_FIELD_DESC);
      oprot.writeI64(struct.maxDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.sequenceNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MASTER_KEY_ID_FIELD_DESC);
      oprot.writeI64(struct.masterKeyId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DelegationTokenIdentifierTupleSchemeFactory implements SchemeFactory {
    public DelegationTokenIdentifierTupleScheme getScheme() {
      return new DelegationTokenIdentifierTupleScheme();
    }
  }

  private static class DelegationTokenIdentifierTupleScheme extends TupleScheme<DelegationTokenIdentifier> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DelegationTokenIdentifier struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOwner()) {
        optionals.set(0);
      }
      if (struct.isSetRenewer()) {
        optionals.set(1);
      }
      if (struct.isSetRealUser()) {
        optionals.set(2);
      }
      if (struct.isSetIssueDate()) {
        optionals.set(3);
      }
      if (struct.isSetMaxDate()) {
        optionals.set(4);
      }
      if (struct.isSetSequenceNumber()) {
        optionals.set(5);
      }
      if (struct.isSetMasterKeyId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetRenewer()) {
        oprot.writeString(struct.renewer);
      }
      if (struct.isSetRealUser()) {
        oprot.writeString(struct.realUser);
      }
      if (struct.isSetIssueDate()) {
        oprot.writeI64(struct.issueDate);
      }
      if (struct.isSetMaxDate()) {
        oprot.writeI64(struct.maxDate);
      }
      if (struct.isSetSequenceNumber()) {
        oprot.writeI64(struct.sequenceNumber);
      }
      if (struct.isSetMasterKeyId()) {
        oprot.writeI64(struct.masterKeyId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DelegationTokenIdentifier struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.renewer = iprot.readString();
        struct.setRenewerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realUser = iprot.readString();
        struct.setRealUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.issueDate = iprot.readI64();
        struct.setIssueDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxDate = iprot.readI64();
        struct.setMaxDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sequenceNumber = iprot.readI64();
        struct.setSequenceNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.masterKeyId = iprot.readI64();
        struct.setMasterKeyIdIsSet(true);
      }
    }
  }

}

